{"version":3,"file":"static/js/334.e8653f83.chunk.js","mappings":"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","sources":["HomePage/constants.js","HomePage/reducer.js","HomePage/saga.js","App/constants.ts","HomePage/index.js","HomePage/styles.js","utils/checkStore.js","utils/reducerInjectors.js","utils/injectReducer.js","utils/constants.js","utils/sagaInjectors.js","utils/injectSaga.tsx"],"sourcesContent":["/*\n * HomeConstants\n * Each action has a corresponding type, which the reducer knows and picks up on.\n * To avoid weird typos between the reducer and the actions, we save them as\n * constants here. We prefix them with 'yourproject/YourComponent' so we avoid\n * reducers accidentally picking up actions they shouldn't.\n *\n * Follow this format:\n * export const YOUR_ACTION_CONSTANT = 'yourproject/YourContainer/YOUR_ACTION_CONSTANT';\n */\n\nexport const CHANGE_USERNAME = \"boilerplate/Home/CHANGE_USERNAME\";\n\n\n","/*\n * HomeReducer\n *\n * The reducer takes care of our data. Using actions, we can\n * update our application state. To add a new action,\n * add it to the switch statement in the reducer function\n *\n */\n\nimport produce from 'immer';\nimport { CHANGE_USERNAME } from './constants';\n\n// The initial state of the App\nexport const initialState = {\n  username: '',\n};\n\n/* eslint-disable default-case, no-param-reassign */\nconst homeReducer = (state = initialState, action) =>\n  produce(state, draft => {\n    switch (action.type) {\n      case CHANGE_USERNAME:\n        // Delete prefixed '@' from the github username\n        draft.username = action.username.replace(/@/gi, '');\n        break;\n    }\n  });\n\nexport default homeReducer;\n","/**\n * Gets the repositories of the user from Github\n */\n\nimport { call, put, select, takeLatest } from 'redux-saga/effects';\nimport { LOAD_REPOS } from '../App/constants';\nimport { reposLoaded, repoLoadingError } from '../App/actions';\n\n// import request from '../../utils/request';\nimport { makeSelectUsername } from './selectors';\n\n/**\n * Github repos request/response handler\n */\nexport function* getRepos() {\n  // Select username from store\n  // const username = yield select(makeSelectUsername());\n  // const requestURL = `https://api.github.com/users/${username}/repos?type=all&sort=updated`;\n\n  // try {\n  //   // Call our request helper (see 'utils/request')\n  //   const repos = yield call(request, requestURL);\n  //   yield put(reposLoaded(repos, username));\n  // } catch (err) {\n  //   yield put(repoLoadingError(err));\n  // }\n}\n\n/**\n * Root saga manages watcher lifecycle\n */\nexport default function* githubData() {\n  // Watches for LOAD_REPOS actions and calls getRepos when one comes in.\n  // By using `takeLatest` only the result of the latest API call is applied.\n  // It returns task descriptor (just like fork) so we can continue execution\n  // It will be cancelled automatically on component unmount\n  yield takeLatest(LOAD_REPOS, getRepos);\n}\n","/*\n * AppConstants\n * Each action has a corresponding type, which the reducer knows and picks up on.\n * To avoid weird typos between the reducer and the actions, we save them as\n * constants here. We prefix them with 'yourproject/YourComponent' so we avoid\n * reducers accidentally picking up actions they shouldn't.\n *\n * Follow this format:\n * export const YOUR_ACTION_CONSTANT = 'yourproject/YourContainer/YOUR_ACTION_CONSTANT';\n */\n\nexport const LOAD_REPOS = 'boilerplate/App/LOAD_REPOS';\nexport const LOAD_REPOS_SUCCESS = 'boilerplate/App/LOAD_REPOS_SUCCESS';\nexport const LOAD_REPOS_ERROR = 'boilerplate/App/LOAD_REPOS_ERROR';\n","/*\n * HomePage\n *\n * This is the first thing users see of our App, at the '/' route\n */\n\nimport React, { memo } from \"react\";\nimport { compose } from \"redux\";\n\nimport { useInjectReducer } from \"../utils/injectReducer\";\nimport { useInjectSaga } from \"../utils/injectSaga\";\nimport reducer from \"./reducer\";\nimport saga from \"./saga\";\nimport stylize from \"../utils/stylize\";\nimport styles from \"./styles\";\nimport photo from \"../images/HAR_0807.jpg\";\nimport { useHistory } from \"react-router-dom\";\n\nconst key = \"home\";\nconst posts = [\n  {\n    id: 1,\n    header: \"പോണ്ടിച്ചേരി\",\n    cover: photo,\n    desc: \"പോണ്ടിച്ചേരിയിലൂടെ ഒരു പറ്റം  സുഹൃത്തുക്കളുമായി അലഞ്ഞു തിരിയുമ്പോൾ  ചെന്ന് പെട്ട കുരുക്കുകളിലേക്ക് ഒരു തിരിഞ്ഞു നോട്ടം.\",\n  },\n];\n\nexport function HomePage({ classes }) {\n  useInjectReducer({ key, reducer });\n  useInjectSaga({ key, saga });\n  const history = useHistory();\n\n \n  return (\n    <div className={classes.container}>\n      {posts.map((post) => {\n         const showPost=() => {\n          history.push(`/blog/${post.id}`)\n        }\n        return (\n          <div className={classes.postContainer} onClick={showPost}>\n            <div\n              style={{ backgroundImage: `url(${post.cover})` }}\n              className={classes.postBg}\n            ></div>\n            <div className={`malayalam ${classes.postDetails}`}>\n              <div className={classes.postHeader}>{post.header}</div>\n              <div className={classes.postDesc}>{post.desc}</div>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default compose(memo)(stylize(HomePage, styles));\n","import ProfilePhoto from \"../images/profile-photo.jpg\";\nexport default function styles() {\n  return {\n    container: {\n      width: \"100%\",\n      display: \"grid\",\n      gridTemplateColumns: 'repeat(3, 1fr)',\n      gridRowGap: '1.5rem',\n      height: 'fit-content',\n      maxHeight: '100%',\n    },\n    postContainer: {\n      position: \"relative\",\n      width: \"350px\",\n      background: \"#fff\",\n      height: \"100%\",\n      borderRadius: \"8px\",\n      transition: \".3s ease-in-out\",\n      transform: \"scale(1) translate3d(0,0,0) perspective(1px)\",\n      transformOrigin: \"left top\",\n      \"&:hover\": {\n        transform: \"translateY(-10px) scale(1) translate3d(0,0,0) perspective(1px)\",\n        transformOrigin: \"left top\",\n      },\n    },\n    postBg: {\n      backgroundSize: \"cover\",\n      height: \"200px\",\n      width: \"100%\",\n      borderRadius: '5px 5px 0 0',\n    },\n    postDetails: {\n      height: \"calc(100% - 200px)\",\n      width: \"100%\",\n      padding: \"1.5rem 0.83rem\",\n      textAlign: \"center\",\n    },\n    postHeader: {\n      fontWeight: \"bold\",\n      fontSize: \"2rem\",\n    },\n    postDesc: {\n      fontSize: \"1rem\",\n      textAlign: \"start\",\n    },\n  };\n}\n","import { conformsTo, isFunction, isObject } from 'lodash';\r\nimport invariant from 'invariant';\r\n\r\n/**\r\n * Validate the shape of redux store\r\n */\r\nexport default function checkStore(store) {\r\n  const shape = {\r\n    dispatch: isFunction,\r\n    subscribe: isFunction,\r\n    getState: isFunction,\r\n    replaceReducer: isFunction,\r\n    runSaga: isFunction,\r\n    injectedReducers: isObject,\r\n    injectedSagas: isObject,\r\n  };\r\n  invariant(\r\n    conformsTo(store, shape),\r\n    '(app/utils...) injectors: Expected a valid redux store',\r\n  );\r\n}\r\n","import invariant from 'invariant';\r\nimport { isEmpty, isFunction, isString } from 'lodash';\r\n\r\nimport checkStore from './checkStore';\r\nimport createReducer from '../reducers';\r\n\r\nexport function injectReducerFactory(store, isValid) {\r\n  return function injectReducer(key, reducer) {\r\n    if (!isValid) checkStore(store);\r\n\r\n    invariant(\r\n      isString(key) && !isEmpty(key) && isFunction(reducer),\r\n      '(app/utils...) injectReducer: Expected `reducer` to be a reducer function',\r\n    );\r\n\r\n    // Check `store.injectedReducers[key] === reducer` for hot reloading when a key is the same but a reducer is different\r\n    if (\r\n      Reflect.has(store.injectedReducers, key) &&\r\n      store.injectedReducers[key] === reducer\r\n    )\r\n      return;\r\n\r\n    store.injectedReducers[key] = reducer; // eslint-disable-line no-param-reassign\r\n    store.replaceReducer(createReducer(store.injectedReducers));\r\n  };\r\n}\r\n\r\nexport default function getInjectors(store) {\r\n  checkStore(store);\r\n\r\n  return {\r\n    injectReducer: injectReducerFactory(store, true),\r\n  };\r\n}\r\n","import React from 'react';\r\nimport hoistNonReactStatics from 'hoist-non-react-statics';\r\nimport { ReactReduxContext } from 'react-redux';\r\n\r\nimport getInjectors from './reducerInjectors';\r\n\r\n/**\r\n * Dynamically injects a reducer\r\n *\r\n * @param {string} key A key of the reducer\r\n * @param {function} reducer A reducer that will be injected\r\n *\r\n */\r\nexport default ({ key, reducer }) => WrappedComponent => {\r\n  class ReducerInjector extends React.Component {\r\n    static WrappedComponent = WrappedComponent;\r\n\r\n    static contextType = ReactReduxContext;\r\n\r\n    static displayName = `withReducer(${WrappedComponent.displayName ||\r\n      WrappedComponent.name ||\r\n      'Component'})`;\r\n\r\n    constructor(props, context) {\r\n      super(props, context);\r\n\r\n      getInjectors(context.store).injectReducer(key, reducer);\r\n    }\r\n\r\n    render() {\r\n      return <WrappedComponent {...this.props} />;\r\n    }\r\n  }\r\n\r\n  return hoistNonReactStatics(ReducerInjector, WrappedComponent);\r\n};\r\n\r\nconst useInjectReducer = ({ key, reducer }) => {\r\n  const context = React.useContext(ReactReduxContext);\r\n  React.useEffect(() => {\r\n    getInjectors(context.store).injectReducer(key, reducer);\r\n  }, []);\r\n};\r\n\r\nexport { useInjectReducer };\r\n","export const RESTART_ON_REMOUNT = '@@saga-injector/restart-on-remount';\r\nexport const DAEMON = '@@saga-injector/daemon';\r\nexport const ONCE_TILL_UNMOUNT = '@@saga-injector/once-till-unmount';\r\n","import invariant from 'invariant';\r\nimport { isEmpty, isFunction, isString, conformsTo } from 'lodash';\r\n\r\nimport checkStore from './checkStore';\r\nimport { DAEMON, ONCE_TILL_UNMOUNT, RESTART_ON_REMOUNT } from './constants';\r\n\r\nconst allowedModes = [RESTART_ON_REMOUNT, DAEMON, ONCE_TILL_UNMOUNT];\r\n\r\nconst checkKey = key =>\r\n  invariant(\r\n    isString(key) && !isEmpty(key),\r\n    '(app/utils...) injectSaga: Expected `key` to be a non empty string',\r\n  );\r\n\r\nconst checkDescriptor = descriptor => {\r\n  const shape = {\r\n    saga: isFunction,\r\n    mode: mode => isString(mode) && allowedModes.includes(mode),\r\n  };\r\n  invariant(\r\n    conformsTo(descriptor, shape),\r\n    '(app/utils...) injectSaga: Expected a valid saga descriptor',\r\n  );\r\n};\r\n\r\nexport function injectSagaFactory(store, isValid) {\r\n  return function injectSaga(key, descriptor = {}, args) {\r\n    if (!isValid) checkStore(store);\r\n\r\n    const newDescriptor = {\r\n      ...descriptor,\r\n      mode: descriptor.mode || DAEMON,\r\n    };\r\n    const { saga, mode } = newDescriptor;\r\n\r\n    checkKey(key);\r\n    checkDescriptor(newDescriptor);\r\n\r\n    let hasSaga = Reflect.has(store.injectedSagas, key);\r\n\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      const oldDescriptor = store.injectedSagas[key];\r\n      // enable hot reloading of daemon and once-till-unmount sagas\r\n      if (hasSaga && oldDescriptor.saga !== saga) {\r\n        oldDescriptor.task.cancel();\r\n        hasSaga = false;\r\n      }\r\n    }\r\n\r\n    if (\r\n      !hasSaga ||\r\n      (hasSaga && mode !== DAEMON && mode !== ONCE_TILL_UNMOUNT)\r\n    ) {\r\n      /* eslint-disable no-param-reassign */\r\n      store.injectedSagas[key] = {\r\n        ...newDescriptor,\r\n        task: store.runSaga(saga, args),\r\n      };\r\n      /* eslint-enable no-param-reassign */\r\n    }\r\n  };\r\n}\r\n\r\nexport function ejectSagaFactory(store, isValid) {\r\n  return function ejectSaga(key) {\r\n    if (!isValid) checkStore(store);\r\n\r\n    checkKey(key);\r\n\r\n    if (Reflect.has(store.injectedSagas, key)) {\r\n      const descriptor = store.injectedSagas[key];\r\n      if (descriptor.mode && descriptor.mode !== DAEMON) {\r\n        descriptor.task.cancel();\r\n        // Clean up in production; in development we need `descriptor.saga` for hot reloading\r\n        if (process.env.NODE_ENV === 'production') {\r\n          // Need some value to be able to detect `ONCE_TILL_UNMOUNT` sagas in `injectSaga`\r\n          store.injectedSagas[key] = 'done'; // eslint-disable-line no-param-reassign\r\n        }\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nexport default function getInjectors(store) {\r\n  checkStore(store);\r\n\r\n  return {\r\n    injectSaga: injectSagaFactory(store, true),\r\n    ejectSaga: ejectSagaFactory(store, true),\r\n  };\r\n}\r\n","import React from \"react\";\r\nimport hoistNonReactStatics from \"hoist-non-react-statics\";\r\nimport { ReactReduxContext } from \"react-redux\";\r\n\r\nimport getInjectors from \"./sagaInjectors\";\r\n\r\n/**\r\n * Dynamically injects a saga, passes component's props as saga arguments\r\n *\r\n * @param {string} key A key of the saga\r\n * @param {function} saga A root saga that will be injected\r\n * @param {string} [mode] By default (constants.DAEMON) the saga will be started\r\n * on component mount and never canceled or started again. Another two options:\r\n *   - constants.RESTART_ON_REMOUNT — the saga will be started on component mount and\r\n *   cancelled with `task.cancel()` on component unmount for improved performance,\r\n *   - constants.ONCE_TILL_UNMOUNT — behaves like 'RESTART_ON_REMOUNT' but never runs it again.\r\n *\r\n */\r\nconst InjectSaga =\r\n  ({ key, saga, mode }: { key: any; saga: any; mode?: any }) =>\r\n  (WrappedComponent: any) => {\r\n    class InjectSaga extends React.Component {\r\n      injectors: any;\r\n      static WrappedComponent = WrappedComponent;\r\n\r\n      static contextType = ReactReduxContext;\r\n\r\n      static displayName = `withSaga(${\r\n        WrappedComponent.displayName || WrappedComponent.name || \"Component\"\r\n      })`;\r\n\r\n      constructor(props: any, context: any) {\r\n        super(props, context);\r\n\r\n        this.injectors = getInjectors(context.store);\r\n\r\n        this.injectors.injectSaga(key, { saga, mode }, this.props);\r\n      }\r\n\r\n      componentWillUnmount() {\r\n        this.injectors.ejectSaga(key);\r\n      }\r\n\r\n      render() {\r\n        //@ts-ignore\r\n        return <WrappedComponent {...this.props} />;\r\n      }\r\n    }\r\n\r\n    return hoistNonReactStatics(InjectSaga, WrappedComponent);\r\n  };\r\nexport default InjectSaga;\r\nconst useInjectSaga = ({\r\n  key,\r\n  saga,\r\n  mode,\r\n}: {\r\n  key: any;\r\n  saga: any;\r\n  mode?: any;\r\n}) => {\r\n  const context = React.useContext(ReactReduxContext);\r\n  React.useEffect(() => {\r\n    const injectors = getInjectors(context.store);\r\n    injectors.injectSaga(key, { saga, mode });\r\n\r\n    return () => {\r\n      injectors.ejectSaga(key);\r\n    };\r\n  }, []);\r\n};\r\n\r\nexport { useInjectSaga };\r\n"],"names":["CHANGE_USERNAME","initialState","username","state","action","produce","draft","type","replace","getRepos","githubData","takeLatest","key","posts","id","header","cover","photo","desc","HomePage","classes","useInjectReducer","reducer","useInjectSaga","saga","history","useHistory","className","container","map","post","postContainer","onClick","push","style","backgroundImage","postBg","postDetails","postHeader","postDesc","compose","memo","stylize","width","display","gridTemplateColumns","gridRowGap","height","maxHeight","position","background","borderRadius","transition","transform","transformOrigin","backgroundSize","padding","textAlign","fontWeight","fontSize","checkStore","store","shape","dispatch","isFunction","subscribe","getState","replaceReducer","runSaga","injectedReducers","isObject","injectedSagas","invariant","conformsTo","injectReducerFactory","isValid","isString","isEmpty","Reflect","has","createReducer","context","React","ReactReduxContext","injectReducer","DAEMON","ONCE_TILL_UNMOUNT","allowedModes","checkKey","checkDescriptor","descriptor","mode","includes","injectSagaFactory","args","newDescriptor","hasSaga","task","ejectSagaFactory","cancel","injectors","injectSaga","ejectSaga"],"sourceRoot":""}