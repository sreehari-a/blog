{"version":3,"file":"static/js/75.6abfdc6e.chunk.js","mappings":"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","sources":["PostViewer/constants.ts","PostViewer/reducer.ts","PostViewer/actions.ts","posts/pondicherry/index.ts","utils/importAll.ts","PostViewer/config.ts","PostViewer/utils.ts","PostViewer/saga.ts","PostViewer/selectors.ts","PostViewer/components/photoViewer.tsx","PostViewer/components/photoViewerStyles.ts","PostViewer/index.tsx","PostViewer/styles.ts","utils/checkStore.js","utils/reducerInjectors.js","utils/injectReducer.js","utils/constants.js","utils/sagaInjectors.js","utils/injectSaga.tsx","posts/pondicherry/photos|sync|nonrecursive|/.(png%7Cjpe?g%7Csvg)$"],"sourcesContent":["/*\n * HomeConstants\n * Each action has a corresponding type, which the reducer knows and picks up on.\n * To avoid weird typos between the reducer and the actions, we save them as\n * constants here. We prefix them with 'yourproject/YourComponent' so we avoid\n * reducers accidentally picking up actions they shouldn't.\n *\n * Follow this format:\n * export const YOUR_ACTION_CONSTANT = 'yourproject/YourContainer/YOUR_ACTION_CONSTANT';\n */\n\nexport const LOAD_FILE = \"boilerplate/PostView/LOAD_FILE\";\nexport const SAVE_FILE = \"boilerplate/PostView/SAVE_FILE\";\nexport const SET_LOADING = \"boilerplate/PostView/SET_LOADING\";\n","/*\n * HomeReducer\n *\n * The reducer takes care of our data. Using actions, we can\n * update our application state. To add a new action,\n * add it to the switch statement in the reducer function\n *\n */\n\nimport produce from \"immer\";\nimport { SAVE_FILE, SET_LOADING } from \"./constants\";\n\n// The initial state of the App\nexport const initialState = {\n  files: {},\n  loading: false,\n};\n\n/* eslint-disable default-case, no-param-reassign */\nconst homeReducer = (state = initialState, action: any) =>\n  produce(state, (draft) => {\n    switch (action.type) {\n      case SAVE_FILE:\n        draft.files = {\n          ...draft.files,\n          [action.payload.id]: action.payload.file,\n        };\n        break;\n      case SET_LOADING:\n        draft.loading = action.payload;\n        break;\n    }\n  });\n\nexport default homeReducer;\n","\n\nimport { LOAD_FILE, SAVE_FILE, SET_LOADING } from './constants';\n\n/**\n * Changes the input field of the form\n *\n * @param  {string} username The new text of the input field\n *\n * @return {object} An action object with a type of CHANGE_USERNAME\n */\nexport function loadTextFile(file: any) {\n  return {\n    type: LOAD_FILE,\n    payload: file,\n  };\n}\nexport function saveTextFile(file: any) {\n  return {\n    type: SAVE_FILE,\n    payload: file,\n  };\n}\nexport function setLoading(isLoading: boolean) {\n  return {\n    type: SET_LOADING,\n    payload: isLoading,\n  };\n}\n","import importAll from \"../../utils/importAll\";\r\nimport TextContent from \"./content.txt\";\r\n\r\n\r\nfunction getPhotos() {\r\n  const images = importAll(\r\n    require.context(\"./photos\", false, /\\.(png|jpe?g|svg)$/)\r\n  );\r\n  console.log(images);\r\n  return images;\r\n}\r\nexport default {\r\n  getPhotos,\r\n  TextContent,\r\n};\r\n","\r\nexport default function importAll(r: any) {\r\n    let images: any = [];\r\n    console.log('r',r)\r\n    r.keys().forEach((item: string, index: string) => {\r\n      images.push(r(item)) ;\r\n    });\r\n    return images;\r\n  }","import Pondicherry from \"../posts/pondicherry\";\r\n\r\nexport const postConfig: any = {\r\n  1: {\r\n    textFile: Pondicherry.TextContent,\r\n    photoFiles: Pondicherry.getPhotos(),\r\n  },\r\n};\r\n","export function getSectionizedText(text: string) {\r\n  const sectionDelimiter = \"-----\";\r\n  const contentDelimiter = \"---\";\r\n  const sectionizedArray: { header: string; content: string }[] = [];\r\n  const [mainHead, ...rest] = text.split(sectionDelimiter);\r\n  rest.forEach((section) => {\r\n    const [sectionHead, sectionContent] = section.split(contentDelimiter);\r\n    sectionizedArray.push({\r\n      header: sectionHead,\r\n      content: sectionContent,\r\n    });\r\n  });\r\n  return {\r\n    header: mainHead,\r\n    sections: sectionizedArray,\r\n  };\r\n}","/**\n * Gets the repositories of the user from Github\n */\n\nimport { call, put, takeLatest } from \"redux-saga/effects\";\nimport { saveTextFile } from \"./actions\";\nimport { postConfig } from \"./config\";\n\nimport { LOAD_FILE } from \"./constants\";\nimport { getSectionizedText } from \"./utils\";\n\n/**\n * Github repos request/response handler\n */\nexport function* readTextFile(action: any) {\n  try {\n    const { id } = action.payload;\n    const file = postConfig[id];\n    const { textFile, photoFiles } = file;\n    //@ts-ignore\n    const text = yield call(() => readFile(textFile));\n    const serializedObject = getSectionizedText(text);\n    yield put(\n      saveTextFile({\n        id,\n        file: { formattedObj: serializedObject, photos: photoFiles },\n      })\n    );\n  } catch (err) {}\n}\n\nasync function readFile(file: any) {\n  const result = await fetch(file)\n    .then((response) => {\n      return response.text();\n    })\n    .then((text) => {\n      return text;\n    })\n    .catch((error) => {\n      throw error;\n    });\n  return result;\n}\n\n/**\n * Root saga manages watcher lifecycle\n */\nexport default function* getPost() {\n  // Watches for LOAD_REPOS actions and calls getRepos when one comes in.\n  // By using `takeLatest` only the result of the latest API call is applied.\n  // It returns task descriptor (just like fork) so we can continue execution\n  // It will be cancelled automatically on component unmount\n  yield takeLatest(LOAD_FILE, readTextFile);\n}\n","/**\n * Homepage selectors\n */\n\nimport { createSelector } from \"reselect\";\nimport { initialState } from \"./reducer\";\n\nconst selectReducer = (state: any) => state.postView || initialState;\n\nconst selectLoading = () =>\n  createSelector(selectReducer, (reducer) => reducer.loading);\nconst selectFiles = () =>\n  createSelector(selectReducer, (reducer) => reducer.files);\n\nexport { selectReducer, selectLoading, selectFiles };\n","import React, { useEffect, useState } from \"react\";\r\nimport { LeftCircleTwoTone, RightCircleTwoTone } from \"@ant-design/icons\";\r\nimport stylize from \"../../utils/stylize\";\r\nimport styles from \"./photoViewerStyles\";\r\nimport Icon from '@ant-design/icons';\r\nimport type { CustomIconComponentProps } from '@ant-design/icons/lib/components/Icon';\r\nimport colors from \"../../colors\";\r\n\r\ntype Props = {\r\n  classes: any;\r\n  photos: string[];\r\n};\r\nconst LeftArrowSvg = () => {\r\n  return (\r\n    <svg\r\n      viewBox=\"64 64 896 896\"\r\n      focusable=\"false\"\r\n      data-icon=\"left-circle\"\r\n      width=\"1em\"\r\n      height=\"1em\"\r\n      fill=\"currentColor\"\r\n      aria-hidden=\"true\"\r\n    >\r\n      <path d=\"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm104 316.9c0 10.2-4.9 19.9-13.2 25.9L457.4 512l145.4 105.2c8.3 6 13.2 15.6 13.2 25.9V690c0 6.5-7.4 10.3-12.7 6.5l-246-178a7.95 7.95 0 010-12.9l246-178a8 8 0 0112.7 6.5v46.8z\"></path>\r\n    </svg>\r\n  );\r\n};\r\nconst RightArrowSvg = () => {\r\n  return (\r\n    <svg\r\n      viewBox=\"64 64 896 896\"\r\n      focusable=\"false\"\r\n      data-icon=\"right-circle\"\r\n      width=\"1em\"\r\n      height=\"1em\"\r\n      fill=\"currentColor\"\r\n      aria-hidden=\"true\"\r\n    >\r\n      <path d=\"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm154.7 454.5l-246 178c-5.3 3.8-12.7 0-12.7-6.5v-46.9c0-10.2 4.9-19.9 13.2-25.9L566.6 512 421.2 406.8c-8.3-6-13.2-15.6-13.2-25.9V334c0-6.5 7.4-10.3 12.7-6.5l246 178c4.4 3.2 4.4 9.8 0 13z\"></path>\r\n    </svg>\r\n  );\r\n};\r\nexport function PhotoViewer(props: Props) {\r\n  const { classes, photos } = props;\r\n  const [index, setIndex] = useState(0);\r\n  useEffect(() => {\r\n    if (index < 0) {\r\n      setIndex(photos.length - 1);\r\n    }\r\n    if (index > photos.length - 1) {\r\n      setIndex(0);\r\n    }\r\n  }, [index]);\r\n  const appendIndex = () => setIndex(index + 1);\r\n  const prependIndex = () => setIndex(index - 1);\r\n  return (\r\n    <div className={classes.container}>\r\n      {/* {photos.map((photo) => (\r\n        // <div\r\n        //   style={{ backgroundImage: `url(${photo})` }}\r\n        //   className={classes.postBg}\r\n        // ></div>\r\n        <img src={photo} className={classes.postBg} />\r\n      ))} */}\r\n      <div className={classes.imageContainer}>\r\n        <button\r\n          id=\"<\"\r\n          name=\"<\"\r\n          className={`${classes.leftButton} ${classes.toggleButton}`}\r\n          onClick={prependIndex}\r\n        >\r\n          {/* <LeftCircleTwoTone twoToneColor=\"#eb2f96\" /> */}\r\n          <Icon component={LeftArrowSvg} style={{color: colors.primary}} />\r\n        </button>\r\n        <img src={photos[index]} alt=\"Loading...\" className={classes.postBg} />\r\n        <button\r\n          id=\">\"\r\n          name=\">\"\r\n          className={`${classes.rightButton} ${classes.toggleButton}`}\r\n          onClick={appendIndex}\r\n        >\r\n          {/* <RightCircleTwoTone twoToneColor=\"#eb2f96\" /> */}\r\n          <Icon component={RightArrowSvg} style={{color: colors.primary}}/>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default stylize(PhotoViewer, styles);\r\n","export default function styles() {\r\n  return {\r\n    container: {\r\n      height: \"100%\",\r\n      width: \"100%\",\r\n      display: \"flex\",\r\n      justifyContent: \"center\",\r\n    },\r\n    toggleButton: {\r\n      background: \"transparent\",\r\n      height: \"100%\",\r\n      border: 0,\r\n      fontSize: \"2rem\",\r\n      position: \"absolute\",\r\n    },\r\n    leftButton: {\r\n      left: \"0\",\r\n    },\r\n    rightButton: {\r\n      right: \"0\",\r\n    },\r\n    imageContainer: {\r\n      width: \"31.25rem\",\r\n      height: \"18.75rem\",\r\n      display: \"flex\",\r\n      justifyContent: \"center\",\r\n      position: \"relative\",\r\n      backgroundColor: '#fff',\r\n      borderRadius: '0.375rem',\r\n      boxShadow: 'rgb(0 0 0 / 16%) 0px 3px 6px, rgb(0 0 0 / 23%) 0px 3px 6px'\r\n    },\r\n    postBg: {\r\n      padding:'0.625rem 0',\r\n    }\r\n  };\r\n}\r\n","/*\r\n * HomePage\r\n *\r\n * This is the first thing users see of our App, at the '/' route\r\n */\r\n\r\nimport React, { memo, useEffect } from \"react\";\r\nimport { compose } from \"redux\";\r\n\r\nimport { useInjectReducer } from \"../utils/injectReducer\";\r\nimport { useInjectSaga } from \"../utils/injectSaga\";\r\nimport reducer from \"./reducer\";\r\nimport saga from \"./saga\";\r\nimport stylize from \"../utils/stylize\";\r\nimport styles from \"./styles\";\r\nimport { createStructuredSelector } from \"reselect\";\r\nimport { connect } from \"react-redux\";\r\nimport { selectFiles, selectLoading } from \"./selectors\";\r\nimport { loadTextFile } from \"./actions\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { postConfig } from \"./config\";\r\nimport PhotoViewer from \"./components/photoViewer\";\r\n\r\nconst key = \"postView\";\r\ntype Props = {\r\n  classes: any;\r\n  files: any;\r\n  loading: boolean;\r\n  readTextFile: Function;\r\n};\r\nexport function PostViewer(props: Props) {\r\n  const { classes, files, loading, readTextFile } = props;\r\n  useInjectReducer({ key, reducer });\r\n  useInjectSaga({ key, saga });\r\n  const [currentPost, setCurrentPost] = React.useState<{\r\n    header?: string;\r\n    sections?: { header: string; content: string }[];\r\n  }>({});\r\n  const [currentPhotos, setCurrentPhotos] = React.useState<string[]>([]);\r\n  //@ts-ignore\r\n  const { id }: { id: number } = useParams();\r\n  useEffect(() => {\r\n    if (!files[id] && postConfig[id]) {\r\n      readTextFile({\r\n        id,\r\n      });\r\n    } else if (files[id]) {\r\n      setCurrentPost(files[id].formattedObj);\r\n      setCurrentPhotos(files[id].photos);\r\n    }\r\n  }, [id, files, readTextFile]);\r\n  return (\r\n    <div className={`${classes.container} malayalam`}>\r\n      <div className={classes.photosSection}>\r\n        {\r\n          //@ts-ignore\r\n          <PhotoViewer photos={currentPhotos} />\r\n        }\r\n      </div>\r\n      <div className={classes.writingSection}>\r\n        {currentPost.sections && (\r\n          <>\r\n            <div className={classes.postHeader}>{currentPost.header}</div>\r\n            {currentPost.sections.map((section) => (\r\n              <div className={classes.section}>\r\n                <div className={classes.sectionHeader}>{section.header}</div>\r\n                <div className={classes.sectionContent}>{section.content}</div>\r\n              </div>\r\n            ))}\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  files: selectFiles(),\r\n  loading: selectLoading(),\r\n});\r\n\r\nfunction mapDispatchToProps(dispatch: any) {\r\n  return {\r\n    readTextFile: (payload: any) => dispatch(loadTextFile(payload)),\r\n  };\r\n}\r\n\r\nconst withConnect = connect(mapStateToProps, mapDispatchToProps);\r\nexport default stylize(compose(withConnect, memo)(PostViewer), styles);\r\n","\r\nexport default function styles() {\r\n  return {\r\n    container: {\r\n    },\r\n    postHeader: {\r\n      fontSize: '2rem',\r\n      fontWeight: 'bold',\r\n    },\r\n    section: {\r\n      padding: '0.8rem 0',\r\n    },\r\n    sectionHeader: {\r\n      fontSize: '1.5rem',\r\n      fontWeight: 'bold'\r\n    },\r\n    sectionContent: {\r\n      fontSize: '1rem',\r\n    },\r\n    photosSection: {\r\n      height: '18.75rem',\r\n      width: '100%',\r\n    },\r\n    writingSection: {\r\n      padding: '0.625rem',\r\n      height: 'calc(100% - 18.75rem)',\r\n      width: '100%',\r\n    }\r\n}\r\n}","import { conformsTo, isFunction, isObject } from 'lodash';\r\nimport invariant from 'invariant';\r\n\r\n/**\r\n * Validate the shape of redux store\r\n */\r\nexport default function checkStore(store) {\r\n  const shape = {\r\n    dispatch: isFunction,\r\n    subscribe: isFunction,\r\n    getState: isFunction,\r\n    replaceReducer: isFunction,\r\n    runSaga: isFunction,\r\n    injectedReducers: isObject,\r\n    injectedSagas: isObject,\r\n  };\r\n  invariant(\r\n    conformsTo(store, shape),\r\n    '(app/utils...) injectors: Expected a valid redux store',\r\n  );\r\n}\r\n","import invariant from 'invariant';\r\nimport { isEmpty, isFunction, isString } from 'lodash';\r\n\r\nimport checkStore from './checkStore';\r\nimport createReducer from '../reducers';\r\n\r\nexport function injectReducerFactory(store, isValid) {\r\n  return function injectReducer(key, reducer) {\r\n    if (!isValid) checkStore(store);\r\n\r\n    invariant(\r\n      isString(key) && !isEmpty(key) && isFunction(reducer),\r\n      '(app/utils...) injectReducer: Expected `reducer` to be a reducer function',\r\n    );\r\n\r\n    // Check `store.injectedReducers[key] === reducer` for hot reloading when a key is the same but a reducer is different\r\n    if (\r\n      Reflect.has(store.injectedReducers, key) &&\r\n      store.injectedReducers[key] === reducer\r\n    )\r\n      return;\r\n\r\n    store.injectedReducers[key] = reducer; // eslint-disable-line no-param-reassign\r\n    store.replaceReducer(createReducer(store.injectedReducers));\r\n  };\r\n}\r\n\r\nexport default function getInjectors(store) {\r\n  checkStore(store);\r\n\r\n  return {\r\n    injectReducer: injectReducerFactory(store, true),\r\n  };\r\n}\r\n","import React from 'react';\r\nimport hoistNonReactStatics from 'hoist-non-react-statics';\r\nimport { ReactReduxContext } from 'react-redux';\r\n\r\nimport getInjectors from './reducerInjectors';\r\n\r\n/**\r\n * Dynamically injects a reducer\r\n *\r\n * @param {string} key A key of the reducer\r\n * @param {function} reducer A reducer that will be injected\r\n *\r\n */\r\nexport default ({ key, reducer }) => WrappedComponent => {\r\n  class ReducerInjector extends React.Component {\r\n    static WrappedComponent = WrappedComponent;\r\n\r\n    static contextType = ReactReduxContext;\r\n\r\n    static displayName = `withReducer(${WrappedComponent.displayName ||\r\n      WrappedComponent.name ||\r\n      'Component'})`;\r\n\r\n    constructor(props, context) {\r\n      super(props, context);\r\n\r\n      getInjectors(context.store).injectReducer(key, reducer);\r\n    }\r\n\r\n    render() {\r\n      return <WrappedComponent {...this.props} />;\r\n    }\r\n  }\r\n\r\n  return hoistNonReactStatics(ReducerInjector, WrappedComponent);\r\n};\r\n\r\nconst useInjectReducer = ({ key, reducer }) => {\r\n  const context = React.useContext(ReactReduxContext);\r\n  React.useEffect(() => {\r\n    getInjectors(context.store).injectReducer(key, reducer);\r\n  }, []);\r\n};\r\n\r\nexport { useInjectReducer };\r\n","export const RESTART_ON_REMOUNT = '@@saga-injector/restart-on-remount';\r\nexport const DAEMON = '@@saga-injector/daemon';\r\nexport const ONCE_TILL_UNMOUNT = '@@saga-injector/once-till-unmount';\r\n","import invariant from 'invariant';\r\nimport { isEmpty, isFunction, isString, conformsTo } from 'lodash';\r\n\r\nimport checkStore from './checkStore';\r\nimport { DAEMON, ONCE_TILL_UNMOUNT, RESTART_ON_REMOUNT } from './constants';\r\n\r\nconst allowedModes = [RESTART_ON_REMOUNT, DAEMON, ONCE_TILL_UNMOUNT];\r\n\r\nconst checkKey = key =>\r\n  invariant(\r\n    isString(key) && !isEmpty(key),\r\n    '(app/utils...) injectSaga: Expected `key` to be a non empty string',\r\n  );\r\n\r\nconst checkDescriptor = descriptor => {\r\n  const shape = {\r\n    saga: isFunction,\r\n    mode: mode => isString(mode) && allowedModes.includes(mode),\r\n  };\r\n  invariant(\r\n    conformsTo(descriptor, shape),\r\n    '(app/utils...) injectSaga: Expected a valid saga descriptor',\r\n  );\r\n};\r\n\r\nexport function injectSagaFactory(store, isValid) {\r\n  return function injectSaga(key, descriptor = {}, args) {\r\n    if (!isValid) checkStore(store);\r\n\r\n    const newDescriptor = {\r\n      ...descriptor,\r\n      mode: descriptor.mode || DAEMON,\r\n    };\r\n    const { saga, mode } = newDescriptor;\r\n\r\n    checkKey(key);\r\n    checkDescriptor(newDescriptor);\r\n\r\n    let hasSaga = Reflect.has(store.injectedSagas, key);\r\n\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      const oldDescriptor = store.injectedSagas[key];\r\n      // enable hot reloading of daemon and once-till-unmount sagas\r\n      if (hasSaga && oldDescriptor.saga !== saga) {\r\n        oldDescriptor.task.cancel();\r\n        hasSaga = false;\r\n      }\r\n    }\r\n\r\n    if (\r\n      !hasSaga ||\r\n      (hasSaga && mode !== DAEMON && mode !== ONCE_TILL_UNMOUNT)\r\n    ) {\r\n      /* eslint-disable no-param-reassign */\r\n      store.injectedSagas[key] = {\r\n        ...newDescriptor,\r\n        task: store.runSaga(saga, args),\r\n      };\r\n      /* eslint-enable no-param-reassign */\r\n    }\r\n  };\r\n}\r\n\r\nexport function ejectSagaFactory(store, isValid) {\r\n  return function ejectSaga(key) {\r\n    if (!isValid) checkStore(store);\r\n\r\n    checkKey(key);\r\n\r\n    if (Reflect.has(store.injectedSagas, key)) {\r\n      const descriptor = store.injectedSagas[key];\r\n      if (descriptor.mode && descriptor.mode !== DAEMON) {\r\n        descriptor.task.cancel();\r\n        // Clean up in production; in development we need `descriptor.saga` for hot reloading\r\n        if (process.env.NODE_ENV === 'production') {\r\n          // Need some value to be able to detect `ONCE_TILL_UNMOUNT` sagas in `injectSaga`\r\n          store.injectedSagas[key] = 'done'; // eslint-disable-line no-param-reassign\r\n        }\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nexport default function getInjectors(store) {\r\n  checkStore(store);\r\n\r\n  return {\r\n    injectSaga: injectSagaFactory(store, true),\r\n    ejectSaga: ejectSagaFactory(store, true),\r\n  };\r\n}\r\n","import React from \"react\";\r\nimport hoistNonReactStatics from \"hoist-non-react-statics\";\r\nimport { ReactReduxContext } from \"react-redux\";\r\n\r\nimport getInjectors from \"./sagaInjectors\";\r\n\r\n/**\r\n * Dynamically injects a saga, passes component's props as saga arguments\r\n *\r\n * @param {string} key A key of the saga\r\n * @param {function} saga A root saga that will be injected\r\n * @param {string} [mode] By default (constants.DAEMON) the saga will be started\r\n * on component mount and never canceled or started again. Another two options:\r\n *   - constants.RESTART_ON_REMOUNT — the saga will be started on component mount and\r\n *   cancelled with `task.cancel()` on component unmount for improved performance,\r\n *   - constants.ONCE_TILL_UNMOUNT — behaves like 'RESTART_ON_REMOUNT' but never runs it again.\r\n *\r\n */\r\nconst InjectSaga =\r\n  ({ key, saga, mode }: { key: any; saga: any; mode?: any }) =>\r\n  (WrappedComponent: any) => {\r\n    class InjectSaga extends React.Component {\r\n      injectors: any;\r\n      static WrappedComponent = WrappedComponent;\r\n\r\n      static contextType = ReactReduxContext;\r\n\r\n      static displayName = `withSaga(${\r\n        WrappedComponent.displayName || WrappedComponent.name || \"Component\"\r\n      })`;\r\n\r\n      constructor(props: any, context: any) {\r\n        super(props, context);\r\n\r\n        this.injectors = getInjectors(context.store);\r\n\r\n        this.injectors.injectSaga(key, { saga, mode }, this.props);\r\n      }\r\n\r\n      componentWillUnmount() {\r\n        this.injectors.ejectSaga(key);\r\n      }\r\n\r\n      render() {\r\n        //@ts-ignore\r\n        return <WrappedComponent {...this.props} />;\r\n      }\r\n    }\r\n\r\n    return hoistNonReactStatics(InjectSaga, WrappedComponent);\r\n  };\r\nexport default InjectSaga;\r\nconst useInjectSaga = ({\r\n  key,\r\n  saga,\r\n  mode,\r\n}: {\r\n  key: any;\r\n  saga: any;\r\n  mode?: any;\r\n}) => {\r\n  const context = React.useContext(ReactReduxContext);\r\n  React.useEffect(() => {\r\n    const injectors = getInjectors(context.store);\r\n    injectors.injectSaga(key, { saga, mode });\r\n\r\n    return () => {\r\n      injectors.ejectSaga(key);\r\n    };\r\n  }, []);\r\n};\r\n\r\nexport { useInjectSaga };\r\n","var map = {\n\t\"./auroville1.jpg\": 1128,\n\t\"./auroville2.jpg\": 6590,\n\t\"./auroville3.jpg\": 9235,\n\t\"./beach1.jpg\": 693,\n\t\"./beach2.jpg\": 9177,\n\t\"./frenchcolony1.jpg\": 9358,\n\t\"./frenchcolony2.jpg\": 7577,\n\t\"./frenchcolony3.jpg\": 4517,\n\t\"./frenchcolony4.jpg\": 8669,\n\t\"./frenchcolony5.jpg\": 5147,\n\t\"./sunrise1.jpg\": 1266,\n\t\"./sunrise2.jpg\": 311,\n\t\"./sunrise3.jpg\": 58\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 1170;"],"names":["LOAD_FILE","SAVE_FILE","SET_LOADING","initialState","files","loading","state","action","produce","draft","type","payload","id","file","saveTextFile","getPhotos","images","r","console","log","keys","forEach","item","index","push","importAll","require","TextContent","postConfig","textFile","Pondicherry","photoFiles","getSectionizedText","text","sectionizedArray","split","mainHead","section","sectionHead","sectionContent","header","content","sections","readTextFile","getPost","call","readFile","serializedObject","put","formattedObj","photos","fetch","then","response","catch","error","result","takeLatest","selectReducer","postView","LeftArrowSvg","viewBox","focusable","width","height","fill","d","RightArrowSvg","stylize","props","classes","useState","setIndex","useEffect","length","className","container","imageContainer","name","leftButton","toggleButton","onClick","Icon","component","style","color","colors","src","alt","postBg","rightButton","display","justifyContent","background","border","fontSize","position","left","right","backgroundColor","borderRadius","boxShadow","padding","key","PostViewer","useInjectReducer","reducer","useInjectSaga","saga","React","currentPost","setCurrentPost","currentPhotos","setCurrentPhotos","useParams","photosSection","writingSection","postHeader","map","sectionHeader","mapStateToProps","createStructuredSelector","createSelector","withConnect","connect","dispatch","compose","memo","fontWeight","checkStore","store","shape","isFunction","subscribe","getState","replaceReducer","runSaga","injectedReducers","isObject","injectedSagas","invariant","conformsTo","injectReducerFactory","isValid","isString","isEmpty","Reflect","has","createReducer","context","ReactReduxContext","injectReducer","DAEMON","ONCE_TILL_UNMOUNT","allowedModes","checkKey","checkDescriptor","descriptor","mode","includes","injectSagaFactory","args","newDescriptor","hasSaga","task","ejectSagaFactory","cancel","injectors","injectSaga","ejectSaga","webpackContext","req","webpackContextResolve","__webpack_require__","o","e","Error","code","Object","resolve","module","exports"],"sourceRoot":""}